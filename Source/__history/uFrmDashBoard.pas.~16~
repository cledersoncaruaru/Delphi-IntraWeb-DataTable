unit uFrmDashBoard;
interface
uses

  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, uBase, IWVCLComponent,
  IWBaseLayoutComponent, IWBaseContainerLayout, IWContainerLayout,
  IWTemplateProcessorHTML, IWVCLBaseControl, IWBaseControl, IWBaseHTMLControl,
  IWControl, IWCompButton, IWCompLabel, IWCanvas, IWChartJS, IWBaseComponent,
  IWBaseHTMLComponent, IWBaseHTML40Component, IWSweetAlert, IWVCLBaseContainer,
  IWContainer, IWHTMLContainer, IWHTML40Container, IWRegion,PngImage,IWColor, IWTypes;
type
  TFrmDashBoard = class(TFrmBase)
    BOTAOFORM: TIWButton;
    IWSweetAlert1: TIWSweetAlert;
    IWButton1: TIWButton;
    BTN_DOWNLOAD: TIWButton;
    BTN_UNDO: TIWButton;
    BTN_UPLOAD: TIWButton;
    BTN_CLEAR: TIWButton;
    IWRegion1: TIWRegion;
    IWSignaturePad1: TIWSignaturePad;
    procedure BOTAOFORMAsyncClick(Sender: TObject; EventParams: TStringList);
    procedure IWAppFormRender(Sender: TObject);
    procedure BTN_POSTClick(Sender: TObject);
    procedure IWButton1AsyncClick(Sender: TObject; EventParams: TStringList);
    procedure BTN_CANCELAsyncClick(Sender: TObject; EventParams: TStringList);
    procedure BTN_DOWNLOADAsyncClick(Sender: TObject; EventParams: TStringList);
    procedure BTN_UNDOAsyncClick(Sender: TObject; EventParams: TStringList);
    procedure BTN_UPLOADAsyncClick(Sender: TObject; EventParams: TStringList);
    procedure BTN_CLEARAsyncClick(Sender: TObject; EventParams: TStringList);
    procedure IWSignaturePad1PngImageUploaded(Sender: TObject;
      aImage: TPngImage);

  private
    { Private declarations }

    Function teste:Boolean;


  public
    { Public declarations }
  end;
var
  FrmDashBoard: TFrmDashBoard;
implementation
{$R *.dfm}

uses UFrmClientes, ServerController,IW.Common.AppInfo;



procedure TFrmDashBoard.BOTAOFORMAsyncClick(Sender: TObject;
  EventParams: TStringList);
begin
  inherited;

  WebApplication.ExecuteJS(Text);


end;

procedure TFrmDashBoard.BTN_CANCELAsyncClick(Sender: TObject;
  EventParams: TStringList);
begin
  inherited;
var opa := ' jsshfdhgdfghdjhg';
end;

procedure TFrmDashBoard.BTN_POSTClick(Sender: TObject);
begin
  inherited;
//IWSweetAlert1.ShowConfirm()(atSuccess,'Sim','Não','IWButton1','BTN_CANCEL',)
end;

procedure TFrmDashBoard.IWAppFormRender(Sender: TObject);
 var
 UmaVarString:String;
 UmaVariavelInteira:Integer;
begin
  inherited;

   UserSession.Clipboard.Get('qualquercoisa1',UmaVarString,True);
   UserSession.Clipboard.Get('MinhaVarInteger',UmaVariavelInteira,True);

end;

procedure TFrmDashBoard.IWButton1AsyncClick(Sender: TObject;
  EventParams: TStringList);
begin
  inherited;
var opa := 'dsfsfsfdsd ';
end;

procedure TFrmDashBoard.BTN_DOWNLOADAsyncClick(Sender: TObject;
  EventParams: TStringList);
begin
  inherited;
 IWSignaturePad1.Download('MySignature.png');
end;

procedure TFrmDashBoard.BTN_UNDOAsyncClick(Sender: TObject;
  EventParams: TStringList);
begin
  inherited;
  IWSignaturePad1.Undo;
end;

procedure TFrmDashBoard.BTN_UPLOADAsyncClick(Sender: TObject;
  EventParams: TStringList);
begin
  inherited;
  IWSignaturePad1.UploadPngImage;
end;

procedure TFrmDashBoard.BTN_CLEARAsyncClick(Sender: TObject;
  EventParams: TStringList);
begin
  inherited;
  IWSignaturePad1.ClearCanvas;
end;

procedure TFrmDashBoard.IWSignaturePad1PngImageUploaded(Sender: TObject;
  aImage: TPngImage);
begin
  inherited;
  aImage.SaveToFile(TIWAppInfo.GetAppPath + 'uploaded_signature.png');
end;

function TFrmDashBoard.teste: Boolean;
var
Teste:String;
begin

teste :=

' Swal.fire({                                              '+
'  title: "Submit your Github username",                   '+
'  input: "text",                                          '+
'  inputAttributes: {                                      '+
'    autocapitalize: "off"                                 '+
'  },                                                      '+
'  showCancelButton: true,                                  '+
'  confirmButtonText: "Look up",                            '+
'  showLoaderOnConfirm: true,                               '+
'  preConfirm: async (login) => {                           '+
'    try {                                                  '+
'      const githubUrl = `                                  '+
'        https://api.github.com/users/${login}              '+
'      `;                                                    '+
'      const response = await fetch(githubUrl);              '+
'      if (!response.ok) {                                   '+
'        return Swal.showValidationMessage(`                 '+
'          ${JSON.stringify(await response.json())}          '+
'        `);                                                 '+
'      }                                                    '+
'      return response.json();                               '+
'    } catch (error) {                                       '+
'      Swal.showValidationMessage(`                          '+
'        Request failed: ${error}                            '+
'      `);                                                   '+
'    }                                                       '+
'  },                                                         '+
'  allowOutsideClick: () => !Swal.isLoading()                '+
'}).then((result) => {                                       '+
'  if (result.isConfirmed) {                                 '+
'    Swal.fire({                                             '+
'      title: ''${result.value.login}'',              '+
'      imageUrl: result.value.avatar_url                     '+
'    });                                                     '+
'  }                                                         '+
'});                                                          ';



end;

end.
